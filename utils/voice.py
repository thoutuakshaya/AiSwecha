import speech_recognition as sr

# Language-specific translations for fallback messages
ERROR_MESSAGES = {
    "en": {
        "unknown": "Sorry, could not understand the audio.",
        "request": "Sorry, speech service is not available.",
    },
    "te": {
        "unknown": "р░Хр▒Нр░╖р░ор░┐р░Вр░Ър░Вр░бр░┐, р░ор▒А р░╕р▒Нр░╡р░░р░В р░Ер░░р▒Нр░ер░В р░Хр░╛р░▓р▒Зр░жр▒Б.",
        "request": "р░Хр▒Нр░╖р░ор░┐р░Вр░Ър░Вр░бр░┐, р░╕р▒Нр░кр▒Ар░Ър▒Н р░╕р▒Зр░╡ р░Ер░Вр░жр▒Бр░мр░╛р░Яр▒Бр░▓р▒Л р░▓р▒Зр░жр▒Б.",
    },
    "hi": {
        "unknown": "рдорд╛рдлрд╝ рдХреАрдЬрд┐рдП, рдореИрдВ рдЖрдкрдХреА рдЖрд╡рд╛рдЬрд╝ рд╕рдордЭ рдирд╣реАрдВ рдкрд╛рдпрд╛ред",
        "request": "рдорд╛рдлрд╝ рдХреАрдЬрд┐рдП, рд╕реНрдкреАрдЪ рд╕реЗрд╡рд╛ рдЙрдкрд▓рдмреНрдз рдирд╣реАрдВ рд╣реИред",
    },
    "ta": {
        "unknown": "рооройрпНройро┐роХрпНроХро╡рпБроорпН, роЙроЩрпНроХро│рпН роХрпБро░ро▓рпИ рокрпБро░ро┐роирпНродрпБ роХрпКро│рпНро│ роорпБроЯро┐ропро╡ро┐ро▓рпНро▓рпИ.",
        "request": "рооройрпНройро┐роХрпНроХро╡рпБроорпН, рокрпЗроЪрпНроЪрпБ роЪрпЗро╡рпИ роХро┐роЯрпИроХрпНроХро╡ро┐ро▓рпНро▓рпИ.",
    },
    "kn": {
        "unknown": "р▓Хр│Нр▓╖р▓ор▓┐р▓╕р▓┐, р▓ир▓┐р▓ир│Нр▓Чр│Ж р▓зр│Нр▓╡р▓ир▓┐р▓пр▓ир│Нр▓ир│Б р▓Ер▓░р│Нр▓ер▓ор▓╛р▓бр▓┐р▓Хр│Кр▓│р│Нр▓│р▓▓р▓╛р▓Чр▓▓р▓┐р▓▓р│Нр▓▓.",
        "request": "р▓Хр│Нр▓╖р▓ор▓┐р▓╕р▓┐, р▓╕р│Нр▓кр│Ар▓Ър│Н р▓╕р│Зр▓╡р│Ж р▓▓р▓нр│Нр▓пр▓╡р▓┐р▓▓р│Нр▓▓.",
    }
}

def recognize_voice(language="te-IN"):
    recognizer = sr.Recognizer()
    lang_code = language.split("-")[0]  # e.g., "te" from "te-IN"

    with sr.Microphone() as source:
        print("ЁЯОЩя╕П Listening...")
        audio = recognizer.listen(source, phrase_time_limit=5)

    try:
        text = recognizer.recognize_google(audio, language=language)
        
        return text
    except sr.UnknownValueError:
        english_msg = ERROR_MESSAGES["en"]["unknown"]
        native_msg = ERROR_MESSAGES.get(lang_code, {}).get("unknown", "")
        return f"{english_msg}\n{native_msg}"
    except sr.RequestError:
        english_msg = ERROR_MESSAGES["en"]["request"]
        native_msg = ERROR_MESSAGES.get(lang_code, {}).get("request", "")
        return f"{english_msg}\n{native_msg}"
